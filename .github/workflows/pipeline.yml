# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request,
# surfacing known-vulnerable versions of the packages declared or updated in the PR.
# Once installed, if the workflow run is marked as required, PRs introducing known-vulnerable
# packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
name: 'Pipeline'
on:
  pull_request:
    branches: [ 'main' ]

# If using a dependency submission action in this workflow this permission will need to be set to:
#
# permissions:
#   contents: write
#
# https://docs.github.com/en/enterprise-cloud@latest/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api
permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    permissions:
          id-token: write
          contents: read
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        # Commonly enabled options, see https://github.com/actions/dependency-review-action#configuration-options for all available options.
        with:
          comment-summary-in-pr: always
          fail-on-severity: high
          
      - name: 'Clean install'
        run: npm ci
        
      - name: 'Build'
        run: npm run build --if-present
        
      - name: 'Lint'
        run: npm lint
 
      - name: 'Authenticate AWS session'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
  
      - name: 'Deploy static site to S3 bucket'
        run: aws s3 sync ./out/ s3://${{ secrets.BUCKET_NAME }} --delete
  
      - name: 'Invalidate Cloudfront cache'
        run: aws cloudfront create-invalidation --distribution-id "${{ secrets.DISTRIBUTION_ID_TO_INVALIDATE }}" --paths '/*'
